#####BOKEH CORONAGRAPH NOISE MODEL SIMULATOR#####
# This code produces an interactive browser widget that runs
# the coronagraph noise model
#
#
# To run this code on your local machine, type
# bokeh serve --show coron_model.py
# 
################################################

# Import some standard python packages

import numpy as np
from astropy.io import fits, ascii 
import pdb
import sys
import os 
from astropy.table import Table, Column
import os
from bokeh.io import curdoc
from bokeh.client import push_session

from bokeh.themes import Theme 
import yaml 
from bokeh.plotting import Figure
from bokeh.models import ColumnDataSource, HoverTool, Paragraph, Range1d, DataRange1d, Label, DataSource
from bokeh.models.glyphs import Text, Rect
from bokeh.layouts import column, row, WidgetBox 
from bokeh.models.widgets import Slider, Panel, Tabs, Div, TextInput, RadioButtonGroup, Select, RadioButtonGroup
from bokeh.io import curdoc, output_file, show
from bokeh.models.callbacks import CustomJS
from bokeh.embed import components, autoload_server

import coronagraph as cg  # Import coronagraph model

cwd = os.getenv('LUVOIR_SIMTOOLS_DIR')

#allow it to run it from other folders and still know where planet folder is
planetdir = "planets/" #new path compared to before
stardir = "star_galaxy/" #new path compared to before
relpath = os.path.join(os.path.dirname(__file__), planetdir)
relpath2 = os.path.join(os.path.dirname(__file__), stardir)

################################
# STARTING PARAMETERS
################################

#background subtraction
bg_factor = 2. #

# Integration time (hours)
Dt = 80.0 # - SLIDER

# Telescopes params
diam = 15. # mirror diameter - SLIDER
Res = 140. # vis resolution - SLIDER
Res_UV = 7. # UV resolution - SLIDER
Res_NIR = 70. #NIR resolution - SLIDER
Tsys = 270. # system temperature - SLIDER

# Planet params
alpha = 90.     # phase angle at quadrature
Phi   = 1.      # phase function at quadrature (already included in SMART run)
Rp    = 1.0     # Earth radii - SLIDER 
r     = 1.0     # semi-major axis (AU) - SLIDER 

# Stellar params
Teff  = 5780.   # Sun-like Teff (K)
Rs    = 1.      # star radius in solar radii

# Planetary system params
d    = 7.     # distance to system (pc)  - SLIDER 
Nez  = 4.      # number of exo-zodis  - SLIDER

# Instrumental Params
owa = 64. #OWA scaling factor - SLIDER
iwa = 3.5 #IWA scaling factor - SLIDER
De_UV = 3e-5 #dark current
De_VIS = 3e-5
De_NIR = 2e-3
Re_UV = 1e-5 #read noise
Re_VIS = 1e-5
Re_NIR = 2.5
CIC_UV = 1.3E-3 #clock induced charge: counts/pix/photon count
CIC_VIS = 1.3e-3
CIC_NIR = 0.0
Dtmax = 0.3 # max single exposure time - SLIDER
wantsnr = 10. #for exposure time calculator - SLIDER
gain = 1.
throughput_vis = 0.18
throughput_uv = 0.18
throughput_nir = 0.18
o_throughput_uv = 0.12
o_throughput_vis = 0.32
o_throughput_nir = 0.6
lammin_uv = 0.2
lammin_vis = 0.515
lammin_nir = 1.0

# Template
template = ''
global template
global comparison
global Teff
global Ts
global stargalaxy
global spec
stargalaxy = 'false'

################################
# READ-IN DATA

# Read-in Earth spectrum file to start 

fn = 'earth_quadrature_radiance_refl.dat'
fn = os.path.join(relpath, fn)
model = np.loadtxt(fn, skiprows=8)
lamhr = model[:,0]
radhr = model[:,1]
solhr = model[:,2]
# Calculate hi-resolution reflectivity
Ahr   = np.pi*(np.pi*radhr/solhr)
solhr = cg.noise_routines.Fstar(lamhr, Teff, Rs, r, AU=True) # stellar flux blackbody for comparison
lammin = 0.2
lammax = 2.
planet_label = ['Synthetic spectrum generated by T. Robinson (Robinson et al. 2011)']
Planet = ['Planet']
Exozodi=['Exozodi']
Zodi=['Zodi']
Speckles=['Speckles']
Dark_noise=['Dark Noise']
Read_noise=['Read noise']
Thermal_noise=['Thermal noise']
ccic_label=['Clock induced charge']
all_astro=['All astrophysical sources']
all_noise=['All sources']

Ahr_ = Ahr
lamhr_ = lamhr
solhr_ = solhr
Teff_ = Teff
Rs_ = Rs


################################
# RUN CORONAGRAPH MODEL
################################

# Run coronagraph with default LUVOIR telescope 
lam, dlam, A, q, Cratio, cp, csp, cz, cez, cD, cR, cth, ccic, DtSNR = \
    cg.count_rates(Ahr, lamhr, solhr, alpha,  Rp, Teff, Rs, r, d, Nez, lammin_uv=lammin_uv, lammin_vis=lammin_vis, lammin_nir=lammin_nir, lammax=lammax, Res=Res, Res_UV = Res_UV, Res_NIR = Res_NIR, diam=diam, Tsys=Tsys, IWA=iwa, OWA=owa,De_UV=De_UV, De_VIS=De_VIS, De_NIR=De_NIR, Re_UV=Re_UV, Re_VIS=Re_VIS, Re_NIR=Re_NIR, CIC_UV=CIC_UV, CIC_VIS=CIC_VIS, CIC_NIR=CIC_NIR, Dtmax=Dtmax, GROUND=False, THERMAL=True,  wantsnr=wantsnr, gain=gain, Tput=throughput_vis,  Tput_uv = throughput_uv, Tput_nir = throughput_nir, o_Tput_uv = o_throughput_uv, o_Tput_vis = o_throughput_vis, o_Tput_nir = o_throughput_nir)
#arg

print 'ran coronagraph model' 




# Calculate background photon count rates
cb = (cz + cez + csp + cD + cR + cth + ccic)
# Convert hours to seconds
Dts = Dt * 3600.
# Calculate signal-to-noise assuming background subtraction (the "2") !gna - removed the "2" at advice of Ty
SNR  = cp*Dts/np.sqrt((cp + bg_factor*cb)*Dts)
# Calculate 1-sigma errors
sig= Cratio/SNR
# Add gaussian noise to flux ratio
spec = Cratio + np.random.randn(len(Cratio))*sig

#update params
lastlam = lam
lastCratio = Cratio
snr_ymax_ = np.max(Cratio)*1e9
yrange=[snr_ymax_]
snr_ymin_ = np.min(Cratio)*1e9
lamC = lastlam * 0.
CratioC = lastCratio * 0.
global lamC
global CratioC

#blank bandpasses
x_uv = [0,0,0,0,0,0]
y_uv = [0,0,0,0,0,0]
x_vis = [0,0,0,0,0,0]
y_vis = [0,0,0,0,0,0]
x_nir = [0,0,0,0,0,0,0,0]
y_nir = [0,0,0,0,0,0,0,0]
x_uvwidth = [0,0,0,0,0,0]
x_viswidth = [0,0,0,0,0,0]
x_nirwidth = [0,0,0,0,0,0,0,0]


#data
planet = ColumnDataSource(data=dict(lam=lam, cratio=Cratio*1e9, spec=spec*1e9, downerr=(spec-sig)*1e9, uperr=(spec+sig)*1e9, cz=cz*Dts, cez=cez*Dts, csp=csp*Dts, cD=cD*Dts, cR=cR*Dts, cth=cth*Dts, cp=cp*Dts, planetrate=cp, czrate=cz, cezrate=cez, csprate=csp, cDrate=cD, cRrate=cR, ctherm=cth, cCIC=ccic, castro=cp+cz+cez+csp, ctotal=cp+cz+cez+csp+cD+cR+cth+ccic))
expplanet = ColumnDataSource(data=dict(lam=lam[np.isfinite(DtSNR)], DtSNR=DtSNR[np.isfinite(DtSNR)])) 
plotyrange = ColumnDataSource(data = dict(yrange=yrange))
compare = ColumnDataSource(data=dict(lam=lamC, cratio=Cratio*1e9)) 
expcompare = ColumnDataSource(data=dict(lam=lam[np.isfinite(DtSNR)], DtSNR=DtSNR[np.isfinite(DtSNR)]*(-1000000))) #to make it not show up
textlabel = ColumnDataSource(data=dict(label = planet_label, Planet=Planet, Exozodi=Exozodi, Zodi=Zodi, Speckles=Speckles, Dark_noise=Dark_noise, Read_noise=Read_noise, Thermal_noise=Thermal_noise, ccic_label=ccic_label,  all_astro=all_astro, all_noise=all_noise))
uv_bandpasses = ColumnDataSource(data=dict(x=x_uv, y=y_uv, width=x_uvwidth))
vis_bandpasses = ColumnDataSource(data=dict(x=x_vis, y=y_vis, width=x_viswidth))
nir_bandpasses = ColumnDataSource(data=dict(x=x_nir, y=y_nir, width=x_nirwidth))

#import pdb; pdb.set_trace()


################################
# BOKEH PLOTTING
################################
#plots spectrum and exposure time
snr_plot = Figure(plot_height=500, plot_width=750, 
                  tools="crosshair,pan,reset,save,box_zoom,wheel_zoom,hover",
                  toolbar_location='right', x_range=[0.2, 2.0], y_range=[0, 0.2])

exp_plot = Figure(plot_height=500, plot_width=750, 
                  tools="crosshair,pan,reset,save,box_zoom,wheel_zoom,hover",
                  toolbar_location='right', x_range=[0.2, 2.0], y_range=[1e-3, 1e10],
                  y_axis_type="log")

counts_plot = Figure(plot_height=500, plot_width=750, 
                  tools="crosshair,pan,reset,save,box_zoom,wheel_zoom,hover",
                  toolbar_location='right', x_range=[0.2, 2.0], y_range=[1e-3, 1e6],
                  y_axis_type="log")

snr_plot.background_fill_color = "ivory"
snr_plot.background_fill_alpha = 1.
snr_plot.border_fill_color = "#1D1B4D"
snr_plot.yaxis.axis_label='F_p/F_s (x10^9)' 
snr_plot.xaxis.axis_label='Wavelength [micron]'
snr_plot.title.text = 'Planet Spectrum: Earth' #initial spectrum is Earth
snr_plot.title.text_color='#BAD8FF' 
snr_plot.yaxis.axis_label_text_color = 'white' 
snr_plot.xaxis.axis_label_text_color = 'white' 
snr_plot.yaxis.major_label_text_color = 'white' 
snr_plot.xaxis.major_label_text_color = 'white' 

exp_plot.background_fill_color = "ivory"
exp_plot.background_fill_alpha = 1.
exp_plot.border_fill_color = "#1D1B4D"
exp_plot.yaxis.axis_label='Integration time for SNR = 10 [hours]' 
exp_plot.xaxis.axis_label='Wavelength [micron]'
exp_plot.title.text = 'Planet Spectrum: Earth' #initial spectrum is Earth
exp_plot.title.text_color='#BAD8FF' 
exp_plot.yaxis.axis_label_text_color = 'white' 
exp_plot.xaxis.axis_label_text_color = 'white' 
exp_plot.yaxis.major_label_text_color = 'white' 
exp_plot.xaxis.major_label_text_color = 'white' 

counts_plot.background_fill_color = "ivory"
counts_plot.background_fill_alpha = 1.
counts_plot.border_fill_color = "#1D1B4D"
counts_plot.yaxis.axis_label='Counts [photons/sec]' 
counts_plot.xaxis.axis_label='Wavelength [micron]'
counts_plot.title.text = 'Count rates' #initial spectrum is Earth
counts_plot.title.text_color='#BAD8FF' 
counts_plot.yaxis.axis_label_text_color = 'white' 
counts_plot.xaxis.axis_label_text_color = 'white' 
counts_plot.yaxis.major_label_text_color = 'white' 
counts_plot.xaxis.major_label_text_color = 'white' 



snr_plot.line('lam','cratio',source=compare,line_width=2.0, color="#F59A0A", alpha=0.7)
snr_plot.line('lam','cratio',source=planet,line_width=2.0, color="#212685", alpha=0.7)
snr_plot.circle('lam', 'spec', source=planet, fill_color='#B4D9FF', line_color='black', size=8, name='snr_plot_circle_hover') 
snr_plot.segment('lam', 'downerr', 'lam', 'uperr', source=planet, line_width=1, line_color='#82AFF6', line_alpha=0.5)

exp_plot.line('lam','DtSNR',source=expcompare,line_width=2.0, color="#F59A0A", alpha=0.7, name='exp_plot_compare_hover')
exp_plot.line('lam','DtSNR',source=expplanet,line_width=2.0, color="#212685", alpha=0.7, name='exp_plot_hover')

counts_plot.line('lam','planetrate',source=planet,line_width=2.0, color="#0072B2", alpha=0.7,  name='counts_plot_hover')
counts_plot.line('lam','cezrate',source=planet,line_width=2.0, color="#D55E00", alpha=0.7,  name='counts_plot_hover')
counts_plot.line('lam','czrate',source=planet,line_width=2.0, color="#CC79A7", alpha=0.7,  name='counts_plot_hover')
counts_plot.line('lam','csprate',source=planet,line_width=2.0, color="#F0E442", alpha=0.7,  name='counts_plot_hover')
counts_plot.line('lam', 'cDrate',source=planet,line_width=2.0, color="#009E73", alpha=0.7,  name='counts_plot_hover')
counts_plot.line('lam', 'cRrate',source=planet,line_width=2.0, color="#56B4E9", alpha=0.7,  name='counts_plot_hover')
counts_plot.line('lam', 'ctherm',source=planet,line_width=2.0, color="#E69F00", alpha=0.7,  name='counts_plot_hover')
counts_plot.line('lam', 'cCIC',source=planet,line_width=2.0, color="blue", alpha=0.7,  name='counts_plot_hover')
counts_plot.line('lam', 'castro',source=planet,line_width=2.0, color="#999999", alpha=0.7,  name='counts_plot_hover')
counts_plot.line('lam','ctotal',source=planet,line_width=2.0, color="black", alpha=0.7,  name='counts_plot_hover')
#add labels
glyph1= Text(x=0.25, y=3e5, text="Planet", text_font_size='9pt', text_font_style='bold', text_color='#0072B2')
glyph2= Text(x=0.25, y=1e5, text="Exozodi", text_font_size='9pt', text_font_style='bold', text_color='#D55E00')
glyph3= Text(x=0.25, y=3e4, text="Zodi", text_font_size='9pt', text_font_style='bold', text_color='#CC79A7')
glyph4= Text(x=0.25, y=1e4, text="Speckles", text_font_size='9pt', text_font_style='bold', text_color='#F0E442')
glyph5= Text(x=0.25, y=3e3, text="Dark_noise", text_font_size='9pt', text_font_style='bold', text_color='#009E73')
glyph6= Text(x=0.25, y=1e3, text="Read_noise", text_font_size='9pt', text_font_style='bold', text_color='#56B4E9')
glyph7= Text(x=0.25, y=3e2, text="Thermal_noise", text_font_size='9pt', text_font_style='bold', text_color='#E69F00')
glyph8= Text(x=0.25, y=1e2, text="ccic_label", text_font_size='9pt', text_font_style='bold', text_color='blue')
glyph9= Text(x=0.25, y=3e1, text="all_astro", text_font_size='9pt', text_font_style='bold', text_color='#999999')
glyph10= Text(x=0.25, y=1e1, text="all_noise", text_font_size='9pt', text_font_style='bold', text_color='black')

counts_plot.add_glyph(textlabel, glyph1)
counts_plot.add_glyph(textlabel, glyph2)
counts_plot.add_glyph(textlabel, glyph3)
counts_plot.add_glyph(textlabel, glyph4)
counts_plot.add_glyph(textlabel, glyph5)
counts_plot.add_glyph(textlabel, glyph6)
counts_plot.add_glyph(textlabel, glyph7)
counts_plot.add_glyph(textlabel, glyph8)
counts_plot.add_glyph(textlabel, glyph9)
counts_plot.add_glyph(textlabel, glyph10)



#text on plot
glyph = Text(x=0.25, y=snr_ymin_*0.95, text="label", text_font_size='9pt', text_font_style='bold', text_color='blue')
#attempting to outline the text here for ease of visibility... 
glyph2 = Text(x=0.245, y=snr_ymin_*0.95, text="label", text_font_size='9pt', text_font_style='bold', text_color='white')
glyph3 = Text(x=0.25, y=snr_ymin_*0.935, text="label", text_font_size='9pt', text_font_style='bold', text_color='white')
glyph4 = Text(x=0.25, y=snr_ymin_*0.965, text="label", text_font_size='9pt', text_font_style='bold', text_color='white')
glyph5 = Text(x=0.255, y=snr_ymin_*0.95, text="label", text_font_size='9pt', text_font_style='bold', text_color='white')
snr_plot.add_glyph(textlabel, glyph2)
snr_plot.add_glyph(textlabel, glyph3)
snr_plot.add_glyph(textlabel, glyph4)
snr_plot.add_glyph(textlabel, glyph5)
snr_plot.add_glyph(textlabel, glyph)



#add bandpasses

#UV:
uv_rect = Rect(x='x',
            y='y',
            width='width',
            height=200,
            fill_alpha=0.3,
            fill_color="#cc33ff")
uv_rect1 = Rect(x='x',
            y='y',
            width='width',
            height=1e22,
            fill_alpha=0.3,
            fill_color="#cc33ff")
snr_plot.add_glyph(uv_bandpasses, uv_rect)
exp_plot.add_glyph(uv_bandpasses, uv_rect1)

#Vis:
vis_rect = Rect(x='x',
            y='y',
            width='width',
            height=200,
            fill_alpha=0.3,
            fill_color="#66ff99")
vis_rect1 = Rect(x='x',
            y='y',
            width='width',
            height=1e22,
            fill_alpha=0.3,
            fill_color="#66ff99")
snr_plot.add_glyph(vis_bandpasses, vis_rect)
exp_plot.add_glyph(vis_bandpasses, vis_rect1)
    
#NIR:
nir_rect = Rect(x='x',
            y='y',
            width='width',
            height=200,
            fill_alpha=0.3,
            fill_color= "#ff0066")
nir_rect1 = Rect(x='x',
            y='y',
            width='width',
            height=1e22,
            fill_alpha=0.3,
            fill_color= "#ff0066")
snr_plot.add_glyph(nir_bandpasses, nir_rect)
exp_plot.add_glyph(nir_bandpasses, nir_rect1)

#hovertool
#hover = snr_plot.select(dict(type=HoverTool))
#hover.tooltips = [
#   ('wavelength', '@lam microns'),
#   ('planet', '@cp{int}'),
#   ('star-planet contrast', '@cratio'),
#   ('wavelength', '@lam microns'),
#   ('zodi', '@cz{int}'),
#   ('exozodi', '@cez{int}'),
#   ('dark current', '@cD{int}'),
#   ('read noise', '@cR{int}'),
#   ('speckle noise', '@csp{int}'),
#   ('thermal', '@cth{int}')
#]


snr_hover = HoverTool(names=['snr_plot_circle_hover'], mode='mouse', tooltips = """ 
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">wavelength: @lam microns</span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">planet-star contrast: @cratio </span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">planet: @cp{int} counts </span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">zodi: @cz{int} counts</span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">exozodi: @cez{int} counts </span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">dark current: @cD{int} counts </span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">read noise: @cR{int} counts </span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">speckle noise: @csp{int} counts </span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">thermal: @cth{int} counts </span>
            </div>
              """)
snr_plot.add_tools(snr_hover)

exp_hover = HoverTool(names=['exp_plot_hover'], mode='mouse', tooltips = """ 
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">wavelength: @lam microns</span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">integration time: @DtSNR hours </span>
            </div>

              """)
exp_plot.add_tools(exp_hover)

exp_compare_hover = HoverTool(names=['exp_plot_compare_hover'], mode='mouse', tooltips = """ 
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">wavelength: @lam microns</span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">comparison integration time: @DtSNR hours </span>
            </div>

              """)
exp_plot.add_tools(exp_compare_hover)


counts_hover = HoverTool(names=['counts_plot_hover'], mode='mouse', tooltips = """ 
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">wavelength: @lam microns</span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">planet: @cp{int} counts </span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">zodi: @cz{int} counts</span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">exozodi: @cez{int} counts </span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">dark current: @cD{int} counts </span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">read noise: @cR{int} counts </span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">speckle noise: @csp{int} counts </span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">thermal: @cth{int} counts </span>
            </div>
            <div>
                <span style="font-size: 14px; font-weight: bold; color: #1D1B4D">clock induced charge: @cCIC{int} counts </span>
            </div>
              """)
counts_plot.add_tools(counts_hover)

#hover = exp_plot.select(dict(type=HoverTool))
#hover.tooltips = [
#   ('wavelength', '@lam microns'),
#   ('integration time', '@DtSNR')
#]


#hover = exp_plot.select(dict(type=HoverTool))
#hover.tooltips = [
#   ('wavelength', '@lam microns'),
#   ('integration time', '@DtSNR')
#]


################################
#  PROGRAMS
################################

def change_filename(attrname, old, new): 
   format_button_group.active = None 


instruction0 = Div(text="""Specify a filename here:
                           (no special characters):""", width=300, height=15)
text_input = TextInput(value="filename", title=" ", width=100)
instruction1 = Div(text="""Then choose a file format here:""", width=300, height=15)
format_button_group = RadioButtonGroup(labels=["txt", "fits"])
instruction2 = Div(text="""The link to download your file will appear here:""", width=300, height=15)
link_box  = Div(text=""" """, width=300, height=15)


def i_clicked_a_button(new): 
    filename=text_input.value + {0:'.txt', 1:'.fits'}[format_button_group.active]
    print "Your format is   ", format_button_group.active, {0:'txt', 1:'fits'}[format_button_group.active] 
    print "Your filename is: ", filename 
    fileformat={0:'txt', 1:'fits'}[format_button_group.active]
    link_box.text = """Working""" 
 
    t = Table(planet.data)
    t = t['lam', 'spec','cratio','uperr','downerr'] 

    if (format_button_group.active == 1): t.write(filename, overwrite=True) 
    if (format_button_group.active == 0): ascii.write(t, filename)
 
    os.system('gzip -f ' +filename) 
    os.system('cp -rp '+filename+'.gz /home/jtastro/jt-astro.science/outputs') 
    print    """Your file is <a href='http://jt-astro.science/outputs/"""+filename+""".gz'>"""+filename+""".gz</a>. """

    link_box.text = """Your file is <a href='http://jt-astro.science/outputs/"""+filename+""".gz'>"""+filename+""".gz</a>. """


#########################################
# GET DATA FROM USER AND UPDATE PLOT
#########################################

def update_data(attrname, old, new):
    print 'Updating model for exptime = ', exptime.value, ' for planet with R = ', radius.value, ' at distance ', distance.value, ' parsec '
    print '                   exozodi = ', exozodi.value, 'diameter (m) = ', diameter.value, 'resolution = ', resolution.value, 'resolution uv =', resolution_UV.value, 'resolution nir =', resolution_NIR.value,
    print '                   temperature (K) = ', temperature.value, 'IWA = ', inner.value, 'OWA = ', outer.value
    print 'You have chosen planet spectrum: ', template.value
    print 'You have chosen comparison spectrum: ', comparison.value
    try:
       lasttemplate
    except NameError:
       lasttemplate = 'Earth' #default first spectrum
    try:
       lastcomparison
    except NameError:
       lastcomparison = 'none' #default first spectrum
    global lasttemplate
    global Ahr_
    global lamhr_
    global solhr_
    global Teff_
    global Rs_
    global Ahr_c
    global lamhr_c
    global solhr_c
    global Teff_c
    global Rs_c
    global radius_c
    global semimajor_c
    global lastcomparison
    global contrast_
    global LUVOIR_A
    stargalaxy = 'false'
    LUVOIR_A = False
    
    #convert log contrast to contrast
    contrast_ = 10**contrast.value

    #if user has selected specific telscope, update parameters
    #note collect_area is currently a hidden variable...
    collect_area = -1 #set if user has not specified a given architecture
    diam_ins = -1 #set if user has not specified a given architecture
    if observatory.value == 'LUVOIR Architecture A':
       diameter.value = 15.
       diam_ins = 13.5 #hidden param, inscribed circle
       collect_area = 155. #hidden param, collecting area
       ntherm.value = 1.
       temperature.value = 270.
     #  resolution_UV.value = 10.
     #  resolution.value = 150.
     #  resolution_NIR.value = 150.
       inner.value = 3.5
       inner_uv.value = 3.5
       inner_nir.value = 2.
       outer.value = 64.
       throughput_vis.value = 0.18
       throughput_uv.value = 0.18
       throughput_nir.value = 0.18
       o_throughput_uv.value = 0.12
       o_throughput_vis.value = 0.32
       o_throughput_nir.value = 0.60 
      # mirror_type.value = 'Al'
       darkcurrent_uv.value = 3e-5
       darkcurrent_vis.value = 3e-5
       darkcurrent_nir.value = 2e-3
       readnoise_uv.value = 1e-2
       readnoise_vis.value = 1e-2
       readnoise_nir.value = 2.5
       cic_uv.value = 1.3e-3
       cic_vis_value = 1.3-3
       cic_nir.value = 0.
       LUVOIR_A = True #used to set wl-dependent throughput
    if observatory.value == 'LUVOIR Architecture B':
       diameter.value = 8
       diam_ins = 6.7 #hidden param, inscribed circle
       collect_area = 43.4 #hidden param, collecting area
       ntherm.value = 1.
       temperature.value = 270.
     #  resolution_UV.value = 10.
     #  resolution.value = 150.
     #  resolution_NIR.value = 150.
       inner.value = 2.
       inner_uv.value = 2.
       inner_nir.value = 2.
       outer.value = 64.
       throughput_vis.value = 0.18
       throughput_uv.value = 0.18
       throughput_nir.value = 0.18
       o_throughput_uv.value = 0.48
       o_throughput_vis.value = 0.48
       o_throughput_nir.value = 0.60 
      # mirror_type.value = 'Al'
       darkcurrent_uv.value = 3e-5
       darkcurrent_vis.value = 3e-5
       darkcurrent_nir.value = 2e-3
       readnoise_uv.value = 1e-2
       readnoise_vis.value = 1e-2
       readnoise_nir.value = 2.5
       cic_uv.value = 1.3e-3
       cic_vis_value = 1.3-3
       cic_nir.value = 0.
       LUVOIR_A = False
# Read-in new spectrum file only if changed
    print 'lasttemplate is ', lasttemplate
    if template.value != lasttemplate:
       if template.value == 'Earth':
          fn = 'earth_quadrature_radiance_refl.dat'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=8)
          lamhr_ = model[:,0]
          radhr_ = model[:,1]
          solhr_ = model[:,2]
          Ahr_   = np.pi*(np.pi*radhr_/solhr_)
          semimajor.value = 1.
          radius.value = 1.
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr, Teff, Rs, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by T. Robinson (Robinson et al. 2011)']


       if template.value == 'Venus':
          fn = 'new_venus.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_ = model[:,0]
          Fhr_ = model[:,3]
          solhr_ = model[:,2]
          Ahr_ = (Fhr_/solhr_) 
          lamhr_ = lamhr_[::-1]
          Ahr_ = Ahr_[::-1]
          semimajor.value = 0.72
          radius.value = 0.94
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by G. Arney']


       if template.value =='Archean Earth':
          fn = 'ArcheanEarth_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=8)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          semimajor.value = 1.
          radius.value = 1.
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by G. Arney (Arney et al. 2016)']
          
       if template.value =='Hazy Archean Earth':
          fn = 'Hazy_ArcheanEarth_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          print fn
          model = np.loadtxt(fn, skiprows=8)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          semimajor.value = 1.
          radius.value = 1.
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by G. Arney (Arney et al. 2016)']


       if template.value =='1% PAL O2 Proterozoic Earth':
          fn = 'proterozoic_hi_o2_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          print fn
          model = np.loadtxt(fn, skiprows=0)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          semimajor.value = 1.
          radius.value = 1.
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by G. Arney (Arney et al. 2016)']
          

       if template.value =='0.1% PAL O2 Proterozoic Earth':
          fn = 'proterozoic_low_o2_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          semimajor.value = 1.
          radius.value = 1.
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by G. Arney (Arney et al. 2016)']

          
       if template.value =='Early Mars':
          fn = 'EarlyMars_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=8)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          semimajor.value = 1.52
          radius.value = 0.53
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by G. Arney based on Smith et al. 2014']

          
       if template.value =='Mars':
          fn = 'Mars_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=8)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          semimajor.value = 1.52
          radius.value = 0.53         
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by T. Robinson']

          
       if template.value =='Jupiter':
          fn = 'Jupiter_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          semimajor.value = 5.46
          radius.value = 10.97
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['0.9-0.3 microns observed by Karkoschka et al. (1998); 0.9-2.4 microns observed by Rayner et al. (2009)']

          
       if template.value =='Saturn':
          fn = 'Saturn_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          semimajor.value = 9.55
          radius.value = 9.14
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['0.9-0.3 microns observed by Karkoschka et al. (1998); 0.9-2.4 microns observed by Rayner et al. (2009)']

          
       if template.value =='Uranus':
          fn = 'Uranus_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          semimajor.value = 19.21
          radius.value = 3.98
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['0.9-0.3 microns observed by Karkoschka et al. (1998); 0.9-2.4 microns observed by Rayner et al. (2009)']

          
       if template.value =='Neptune':
          fn = 'Neptune_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          semimajor.value = 29.8
          radius.value = 3.86
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['0.9-0.3 microns observed by Karkoschka et al. (1998); 0.9-2.4 microns observed by Rayner et al. (2009)']

       if template.value =='Warm Neptune at 2 AU':
          fn = 'Reflection_a2_m1.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          lamhr_ = lamhr_ / 1000. #convert to microns
          Ahr_ = Ahr_ * 0.67 #convert to geometric albedo
          semimajor.value = 2.0
          radius.value = 3.86
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by R. Hu (Hu and Seager 2014)']

       if template.value =='Warm Neptune w/o Clouds at 1 AU':
          fn = 'Reflection_a1_m2.6_LM_NoCloud.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          lamhr_ = lamhr_ / 1000. #convert to microns
          Ahr_ = Ahr_ * 0.67 #convert to geometric albedo
          semimajor.value = 1.0
          radius.value = 3.86
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by R. Hu (Hu and Seager 2014)']
          
       if template.value =='Warm Neptune w/ Clouds at 1 AU':
          fn = 'Reflection_a1_m2.6_LM.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          lamhr_ = lamhr_ / 1000. #convert to microns
          Ahr_ = Ahr_ * 0.67 #convert to geometric albedo
          semimajor.value = 1.0
          radius.value = 3.86
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by R. Hu']

       if template.value =='Warm Jupiter at 0.8 AU':
          fn = '0.8AU_3x.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_ = model[:,1]
          Ahr_ = model[:,3]
          semimajor.value = 0.8
          radius.value = 10.97
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by K. Cahoy (Cahoy et al. 2010)']

       if template.value =='Warm Jupiter at 2 AU':
          fn = '2AU_3x.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_ = model[:,1]
          Ahr_ = model[:,3]
          semimajor.value = 2.0
          radius.value = 10.97
          Teff_  = 5780.   # Sun-like Teff (K)
          Rs_    = 1.      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by K. Cahoy (Cahoy et al. 2010)']             
          
       if template.value =='False O2 Planet (orbiting F2V)':
          fn = 'fstarcloudy_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_ = model[:,0]
          Ahr_ = model[:,1]
          semimajor.value = 1.72 #Earth equivalent distance for F star
          radius.value = 1.
          Teff_  = 7050.   # F2V Teff (K)
          Rs_    = 1.3     # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by S. Domagal-Goldman (Domagal-Goldman et al. 2014)']


       if template.value =='Proxima Cen b 10 bar 95% O2 dry':
          fn = 'Proxima15_o2lb_10bar_dry.pt_filtered_hitran2012_50_100000cm_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_ = model[:,0]
          solhr_ = model[:,2]
          Flx_ = model[:,3]
          Ahr_ = Flx_/solhr_
          lamhr_ = lamhr_[::-1]
          Ahr_ = Ahr_[::-1]
          semimajor.value = 0.048
          radius.value = 1.
          distance.value = 1.3
          Teff_  = 3040.   # Sun-like Teff (K)
          Rs_    = 0.141      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by E. Schwieterman (Meadows et al. 2016)']

          
       if template.value =='Proxima Cen b 10 bar 95% O2 wet':
          fn = 'Proxima15_o2lb_10bar_h2o.pt_filtered_hitran2012_50_100000cm_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_ = model[:,0]
          solhr_ = model[:,2]
          Flx_ = model[:,3]
          Ahr_ = Flx_/solhr_
          lamhr_ = lamhr_[::-1]
          Ahr_ = Ahr_[::-1]
          semimajor.value = 0.048
          radius.value = 1.
          distance.value=1.3
          Teff_  = 3040.   # Sun-like Teff (K)
          Rs_    = 0.141      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by E. Schwieterman (Meadows et al. 2016)']

       if template.value =='Proxima Cen b 10 bar O2-CO2':
          fn = 'Proxima16_O2_CO2_10bar_prox_hitran2012_50_100000cm_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_ = model[:,0]
          solhr_ = model[:,2]
          Flx_ = model[:,3]
          Ahr_ = Flx_/solhr_
          lamhr_ = lamhr_[::-1]
          Ahr_ = Ahr_[::-1]
          semimajor.value = 0.048
          radius.value = 1.
          distance.value = 1.3
          Teff_  = 3040.   # Sun-like Teff (K)
          Rs_    = 0.141      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by E. Schwieterman (Meadows et al. 2016)']

       if template.value =='Proxima Cen b 90 bar O2-CO2':
          fn = 'Proxima16_O2_CO2_90bar_prox_hitran2012_50_100000cm_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_ = model[:,0]
          solhr_ = model[:,2]
          Flx_ = model[:,3]
          Ahr_ = Flx_/solhr_
          lamhr_ = lamhr_[::-1]
          Ahr_ = Ahr_[::-1]
          semimajor.value = 0.048
          radius.value = 1.
          distance.value = 1.3
          Teff_  = 3040.   # Sun-like Teff (K)
          Rs_    = 0.141      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by E. Schwieterman (Meadows et al. 2016)']

       if template.value =='Proxima Cen b 90 bar Venus':
          fn = 'Proxima17_smart_spectra_Venus90bar_clouds_500_100000cm-1_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_ = model[:,0]
          solhr_ = model[:,2]
          Flx_ = model[:,3]
          Ahr_ = Flx_/solhr_
          lamhr_ = lamhr_[::-1]
          Ahr_ = Ahr_[::-1]
          semimajor.value = 0.048
          radius.value = 1.
          distance.value = 1.3
          Teff_  = 3040.   # Sun-like Teff (K)
          Rs_    = 0.141      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by G. Arney (Meadows et al. 2016)']

       if template.value =='Proxima Cen b 10 bar Venus':
          fn = 'Proxima17_smart_spectra_Venus10bar_cloudy_500_100000cm-1_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_ = model[:,0]
          solhr_ = model[:,2]
          Flx_ = model[:,3]
          Ahr_ = Flx_/solhr_
          lamhr_ = lamhr_[::-1]
          Ahr_ = Ahr_[::-1]
          semimajor.value = 0.048
          radius.value = 1.
          distance.value = 1.3
          Teff_  = 3040.   # Sun-like Teff (K)
          Rs_    = 0.141      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by G. Arney (Meadows et al. 2016)']

       if template.value =='Proxima Cen b CO2/CO/O2 dry':
          fn = 'Proxima18_gao_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_ = model[:,0]
          solhr_ = model[:,2]
          Flx_ = model[:,3]
          Ahr_ = Flx_/solhr_
          lamhr_ = lamhr_[::-1]
          Ahr_ = Ahr_[::-1]
          semimajor.value = 0.048
          radius.value = 1.
          distance.value = 1.3
          Teff_  = 3040.   # Sun-like Teff (K)
          Rs_    = 0.141      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by E. Schwieterman based on work by P. Gao (Meadows et al. 2016; Gao et al. 2015)']            

       if template.value =='Proxima Cen b Earth':
          # this one needs a weighted average
          fn = 'Proxima19_earth_prox.pt_stratocum_hitran2012_50_100000cm_toa.rad'
          fn1 = 'Proxima19_earth_prox.pt_filtered_hitran2012_50_100000cm_toa.rad'
          fn2 = 'Proxima19_earth_prox.pt_stratocum_hitran2012_50_100000cm_toa.rad'
          fn = os.path.join(relpath, fn)
          fn1 = os.path.join(relpath, fn1)
          fn2 = os.path.join(relpath, fn2)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_ = model[:,0]
          solhr_ = model[:,2]
          Flx_ = model[:,3]
          model1 = np.loadtxt(fn1, skiprows=1)
          lamhr_1 = model1[:,0]
          solhr_1 = model1[:,2]
          Flx_1 = model1[:,3]
          model2 = np.loadtxt(fn2, skiprows=1)
          lamhr_2 = model2[:,0]
          solhr_2 = model2[:,2]
          Flx_2 = model2[:,3]
          Ahr_ = Flx_/solhr_
          Ahr_1 = Flx_1/solhr_1
          Ahr_2 = Flx_2/solhr_2
          Ahr_ = (Ahr_*0.25+Ahr_2*0.25+Ahr_1*0.5)
          lamhr_ = lamhr_[::-1]
          Ahr_ = Ahr_[::-1]
          semimajor.value = 0.048
          radius.value = 1.
          distance.value = 1.3
          Teff_  = 3040.   # Sun-like Teff (K)
          Rs_    = 0.141      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by E. Schwieterman (Meadows et al. 2016)']  

       if template.value =='Proxima Cen b Archean Earth':
          fn = 'Proxima21_HAZE_msun21_0.0Ga_1.00e-02ch4_rmix_5.0E-2__30.66fscale_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_ = model[:,0]
          solhr_ = model[:,2]
          Flx_ = model[:,3]
          Ahr_ = Flx_/solhr_
          lamhr_ = lamhr_[::-1]
          Ahr_ = Ahr_[::-1]
          semimajor.value = 0.048
          radius.value = 1.
          distance.value = 1.3
          Teff_  = 3040.   # Sun-like Teff (K)
          Rs_    = 0.141      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by G. Arney (Meadows et al. 2016)']           

       if template.value =='Proxima Cen b hazy Archean Earth':
          fn = 'Proxima21_HAZE_msun21_0.0Ga_3.00e-02ch4_rmix_5.0E-2__30.66fscale_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_ = model[:,0]
          solhr_ = model[:,2]
          Flx_ = model[:,3]
          Ahr_ = Flx_/solhr_
          lamhr_ = lamhr_[::-1]
          Ahr_ = Ahr_[::-1]
          semimajor.value = 0.048
          radius.value = 1.
          distance.value = 1.3
          Teff_  = 3040.   # Sun-like Teff (K)
          Rs_    = 0.141      # star radius in solar radii
          solhr_ =  cg.noise_routines.Fstar(lamhr_, Teff_, Rs_, semimajor.value, AU=True)
          planet_label = ['Synthetic spectrum generated by G. Arney (Meadows et al. 2016)']           
          
       global lammin
       global lammax
       global planet_label
       lammin=min(lamhr_)
       if lammin <= 0.2:
          lammin = 0.2
       lammax=3.
          
       

    print "ground based = ", ground_based.value
    if ground_based.value == "No":
       ground_based_ = False
    if ground_based.value == "Yes":
       ground_based_ = True
    
    # Run coronagraph 
    lam, dlam, A, q, Cratio, cp, csp, cz, cez, cD, cR, cth, ccic, DtSNR = \
    cg.count_rates(Ahr_, lamhr_, solhr_, alpha,  radius.value, Teff_, Rs_, semimajor.value, distance.value, exozodi.value, diam=diameter.value, diam_ins=diam_ins, collect_area=collect_area, Res=resolution.value, Res_UV = resolution_UV.value, Res_NIR = resolution_NIR.value, Tsys=temperature.value, IWA=inner.value, IWA_UV=inner_uv.value, IWA_NIR=inner_nir.value, OWA=outer.value, lammin_uv=lammin_uv, lammin_vis=lammin_vis, lammin_nir=lammin_nir, lammax=lammax, De_UV=darkcurrent_uv.value, De_VIS=darkcurrent_vis.value, De_NIR=darkcurrent_nir.value, Re_UV=readnoise_uv.value, Re_VIS=readnoise_vis.value, Re_NIR=readnoise_nir.value, CIC_UV=cic_uv.value, CIC_VIS = cic_vis.value, CIC_NIR = cic_nir.value, Dtmax = dtmax.value, THERMAL=True, GROUND=ground_based_, wantsnr=want_snr.value, ntherm=ntherm.value, gain=gain.value, Tput=throughput_vis.value,  Tput_uv = throughput_uv.value, Tput_nir = throughput_nir.value, o_Tput_uv = o_throughput_uv.value, o_Tput_vis = o_throughput_vis.value, o_Tput_nir = o_throughput_nir.value, C=contrast_, LUVOIR_A=LUVOIR_A)

    
    print 'ran coronagraph model'
    # Calculate background photon count rates
    cb = (cz + cez + csp + cD + cR + cth + ccic)
    # Convert hours to seconds
    Dts = exptime.value * 3600.
    # Calculate signal-to-noise assuming background subtraction (the "2")
    SNR  = cp*Dts/np.sqrt((cp + bg_factor*cb)*Dts)
    # Calculate 1-sigma errors
    sig= Cratio/SNR
    # Add gaussian noise to flux ratio
    spec = Cratio + np.random.randn(len(Cratio))*sig
    lastlam = lam
    lastCratio = Cratio
    global lastlam
    global lastCratio

    np.savetxt('last_run.txt', np.c_[lam, spec*1e9, Cratio*1e9, (spec-sig)*1e9, (spec+sig)*1e9],  delimiter='     ', comments='')      
    
    
    #UPDATE DATA
    planet.data = dict(lam=lam, cratio=Cratio*1e9, spec=spec*1e9, downerr=(spec-sig)*1e9, uperr=(spec+sig)*1e9, cz=cz*Dts, cez=cez*Dts, csp=csp*Dts, cD=cD*Dts, cR=cR*Dts, cth=cth*Dts, cp=cp*Dts, planetrate=cp, czrate=cz, cezrate=cez, csprate=csp, cDrate=cD, cRrate=cR, cCIC = ccic, castro=cp+cz+cez+csp, ctherm=cth, ctotal=cp+cz+cez+csp+cD+cR+cth+ccic)
    expplanet.data = dict(lam=lam[np.isfinite(DtSNR)], DtSNR=DtSNR[np.isfinite(DtSNR)])
     #make the data the time for a given SNR if user wants this:
    textlabel.data = dict(label=planet_label, Planet=Planet, Exozodi=Exozodi, Zodi=Zodi, Speckles=Speckles, Dark_noise=Dark_noise, Read_noise=Read_noise, Thermal_noise=Thermal_noise,  all_astro=all_astro, all_noise=all_noise, ccic_label=ccic_label)
    if bandpass.value == "No":
       x_uv = [0,0,0,0,0,0]
       y_uv = [0,0,0,0,0,0]
       x_vis = [0,0,0,0,0,0]
       y_vis = [0,0,0,0,0,0]
       x_nir = [0,0,0,0,0,0,0,0,0]
       y_nir = [0,0,0,0,0,0,0,0,0]
       x_uvwidth = [0,0,0,0,0,0]
       x_viswidth = [0,0,0,0,0,0]
       x_nirwidth = [0,0,0,0,0,0,0,0,0]

       uv_bandpasses.data = dict(x=x_uv, y=y_uv, width=x_uvwidth)
       vis_bandpasses.data = dict(x=x_vis, y=y_vis, width=x_viswidth)
       nir_bandpasses.data = dict(x=x_nir, y=y_nir, width=x_nirwidth)

       print 'no bandpasses'
  
    if bandpass.value == "Yes":
       x_vis1 = [0.41, 0.44, 0.525, 0.565, 0.675]
       x_vis2 = [0.45, 0.535, 0.575, 0.685, 0.820]
       sum = [a + b for a, b in zip(x_vis2, x_vis1)] 
       x_vis = [0,0,0,0,0]
       x_vis = [x * 0.5 for x in sum]
       x_viswidth = [a - b for a, b in zip(x_vis2, x_vis1)] 
           
       x_nir1 = [0.82, 0.89, 1.0, 1.09, 1.31, 1.5, 1.77, 1.97, 2.23]
       x_nir2 = [0.90, 1.07, 1.1, 1.32, 1.58, 1.8, 2.00, 2.26, 2.50]
       sum = [a + b for a, b in zip(x_nir2, x_nir1)] 
       x_nir = [0,0,0,0,0,0,0,0,0]
       x_nir = [x * 0.5 for x in sum]
       x_nirwidth = [a - b for a, b in zip(x_nir2, x_nir1)] 


       x_uv =  [0,0,0,0,0,0]
       x_uvwidth =  [0,0,0,0,0,0]
      # x_uv=[0.220, 0.240, 0.270, 0.305, 0.345, 0.390]
       y_uv = [0,0,0,0,0,0]
       y_vis = [0,0,0,0,0,0]
       y_nir = [0,0,0,0,0,0,0,0,0]
      # x_uvwidth=[0.03, 0.04, 0.04, 0.05, 0.05, 0.06]

       
       uv_bandpasses.data = dict(x=x_uv, y=y_uv, width=x_uvwidth)
       vis_bandpasses.data = dict(x=x_vis, y=y_vis, width=x_viswidth)
       nir_bandpasses.data = dict(x=x_nir, y=y_nir, width=x_nirwidth)


       print 'yes bandpasses'
      # print x_uvwidth

    #pdb.set_trace()
    format_button_group.active = None
    lasttemplate = template.value #bug: was "comparison.value"
    teststar = False
    if 'star' in comparison.value: teststar = True
    if 'galaxy' in comparison.value: teststar = True
    if 'brown dwarf' in comparison.value: teststar = True

    print 'teststar is', teststar
        
    #IF YOU WANT COMPARISON SPECTRUM:
    if comparison.value != lastcomparison or teststar:
      stargalaxy = 'false'
      
      if comparison.value == 'Earth':
          fn = 'earth_quadrature_radiance_refl.dat'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=8)
          lamhr_c = model[:,0]
          radhr_c = model[:,1]
          solhr_c = model[:,2]
          Ahr_c   = np.pi*(np.pi*radhr_c/solhr_c)
          semimajor_c = 1.
          radius_c = 1.
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by T. Robinson (Robinson et al. 2011)']

      if comparison.value == 'Venus':
          fn = 'new_venus.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_c = model[:,0]
          Fhr_c = model[:,3]
          solhr_c = model[:,2]
          Ahr_c = (Fhr_c/solhr_c)
          lamhr_c = lamhr_c[::-1]
          Ahr_c = Ahr_c[::-1]
          semimajor_c = 0.72
          radius_c = 0.94
          Teff_c = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by G. Arney']

      if comparison.value =='Archean Earth':
          fn = 'ArcheanEarth_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=8)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          semimajor_c = 1.
          radius_c = 1.
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by G. Arney (Arney et al. 2016)']
          
      if comparison.value =='Hazy Archean Earth':
          fn = 'Hazy_ArcheanEarth_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=8)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          semimajor_c = 1.
          radius_c = 1.
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by G. Arney (Arney et al. 2016)']


      if comparison.value =='1% PAL O2 Proterozoic Earth':
          fn = 'proterozoic_hi_o2_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          semimajor_c = 1.
          radius_c = 1.
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by G. Arney (Arney et al. 2016)']
          

      if comparison.value =='0.1% PAL O2 Proterozoic Earth':
          fn = 'proterozoic_low_o2_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          semimajor_c = 1.
          radius_c = 1.
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by G. Arney (Arney et al. 2016)']

          
      if comparison.value =='Early Mars':
          fn = 'EarlyMars_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=8)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          semimajor_c = 1.52
          radius_c = 0.53
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by G. Arney based on Smith et al. 2014']

          
      if comparison.value =='Mars':
          fn = 'Mars_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=8)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          semimajor_c = 1.52
          radius_c = 0.53         
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by T. Robinson']

          
      if comparison.value =='Jupiter':
          fn = 'Jupiter_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          semimajor_c = 5.46
          radius_c = 10.97
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['0.9-0.3 microns observed by Karkoschka et al. (1998); 0.9-2.4 microns observed by Rayner et al. (2009)']

          
      if comparison.value =='Saturn':
          fn = 'Saturn_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          semimajor_c = 9.55
          radius_c = 9.14
          Teff_c = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['0.9-0.3 microns observed by Karkoschka et al. (1998); 0.9-2.4 microns observed by Rayner et al. (2009)']

          
      if comparison.value =='Uranus':
          fn = 'Uranus_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          semimajor_c = 19.21
          radius_c = 3.98
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['0.9-0.3 microns observed by Karkoschka et al. (1998); 0.9-2.4 microns observed by Rayner et al. (2009)']

          
      if comparison.value =='Neptune':
          fn = 'Neptune_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          semimajor_c = 29.8
          radius_c = 3.86
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['0.9-0.3 microns observed by Karkoschka et al. (1998); 0.9-2.4 microns observed by Rayner et al. (2009)']


      if comparison.value =='Warm Neptune at 2 AU':
          fn = 'Reflection_a2_m1.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          lamhr_c = lamhr_c / 1000. #convert to microns
          Ahr_c = Ahr_c * 0.67 #convert to geometric albedo
          semimajor_c = 2.0
          radius_c = 3.86
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by R. Hu (Hu and Seager 2014)']

      if comparison.value =='Warm Neptune w/o Clouds at 1 AU':
          fn = 'Reflection_a1_m2.6_LM_NoCloud.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          lamhr_c = lamhr_c / 1000. #convert to microns
          Ahr_c = Ahr_c* 0.67 #convert to geometric albedo
          semimajor_c = 1.0
          radius_c = 3.86
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by R. Hu (Hu and Seager 2014)']
          
      if comparison.value =='Warm Neptune w/ Clouds at 1 AU':
          fn = 'Reflection_a1_m2.6_LM.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          lamhr_c = lamhr_c / 1000. #convert to microns
          Ahr_c = Ahr_c * 0.67 #convert to geometric albedo
          semimajor_c = 1.0
          radius_c = 3.86
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by R. Hu']

      if comparison.value =='Warm Jupiter at 0.8 AU':
          fn = '0.8AU_3x.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_c = model[:,1]
          Ahr_c = model[:,3]
          semimajor_c = 0.8
          radius_c = 10.97
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by K. Cahoy (Cahoy et al. 2010)']

      if comparison.value =='Warm Jupiter at 2 AU':
          fn = '2AU_3x.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_c = model[:,1]
          Ahr_c = model[:,3]
          semimajor_c = 2.0
          radius_c = 10.97
          Teff_c  = 5780.   # Sun-like Teff (K)
          Rs_c    = 1.      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by K. Cahoy (Cahoy et al. 2010)']              

      if comparison.value =='False O2 Planet (orbiting F2V)':
          fn = 'fstarcloudy_geo_albedo.txt'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=0)
          lamhr_c = model[:,0]
          Ahr_c = model[:,1]
          semimajor_c = 1.72 #Earth equivalent distance for F star
          radius_c = 1.
          Teff_c  = 7050.   # F2V Teff (K)
          Rs_c    = 1.3     # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by S. Domagal-Goldman (Domagal-Goldman et al. 2014)']              

      if comparison.value =='Proxima Cen b 10 bar 95% O2 dry':
          fn = 'Proxima15_o2lb_10bar_dry.pt_filtered_hitran2012_50_100000cm_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_c = model[:,0]
          solhr_c = model[:,2]
          Flx_c = model[:,3]
          Ahr_c = Flx_c/solhr_c
          lamhr_c = lamhr_c[::-1]
          Ahr_c = Ahr_c[::-1]
          semimajor_c = 0.048
          radius_c = 1.
          distance_c = 1.3
          Teff_c  = 3040.   # Sun-like Teff (K)
          Rs_c    = 0.141      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by E. Schwieterman (Meadows et al. 2016)']

          
      if comparison.value =='Proxima Cen b 10 bar 95% O2 wet':
          fn = 'Proxima15_o2lb_10bar_h2o.pt_filtered_hitran2012_50_100000cm_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_c = model[:,0]
          solhr_c = model[:,2]
          Flx_c = model[:,3]
          Ahr_c = Flx_c/solhr_c
          lamhr_c = lamhr_c[::-1]
          Ahr_c = Ahr_c[::-1]
          semimajor_c = 0.048
          radius_c = 1.
          distance_c=1.3
          Teff_c  = 3040.   # Sun-like Teff (K)
          Rs_c    = 0.141      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by E. Schwieterman (Meadows et al. 2016)']

      if comparison.value =='Proxima Cen b 10 bar O2-CO2':
          fn = 'Proxima16_O2_CO2_10bar_prox_hitran2012_50_100000cm_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_c = model[:,0]
          solhr_c = model[:,2]
          Flx_c = model[:,3]
          Ahr_c = Flx_c/solhr_c
          lamhr_c = lamhr_c[::-1]
          Ahr_c = Ahr_c[::-1]
          semimajor_c = 0.048
          radius_c = 1.
          distance_c = 1.3
          Teff_c  = 3040.   # Sun-like Teff (K)
          Rs_c    = 0.141      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by E. Schwieterman (Meadows et al. 2016)']

      if comparison.value =='Proxima Cen b 90 bar O2-CO2':
          fn = 'Proxima16_O2_CO2_90bar_prox_hitran2012_50_100000cm_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_c = model[:,0]
          solhr_c = model[:,2]
          Flx_c = model[:,3]
          Ahr_c = Flx_c/solhr_c
          lamhr_c = lamhr_c[::-1]
          Ahr_c = Ahr_c[::-1]
          semimajor_c = 0.048
          radius_c = 1.
          distance_c = 1.3
          Teff_c  = 3040.   # Sun-like Teff (K)
          Rs_c    = 0.141      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by E. Schwieterman (Meadows et al. 2016)']

      if comparison.value =='Proxima Cen b 90 bar Venus':
          fn = 'Proxima17_smart_spectra_Venus90bar_clouds_500_100000cm-1_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_c = model[:,0]
          solhr_c = model[:,2]
          Flx_c = model[:,3]
          Ahr_c = Flx_c/solhr_c
          lamhr_c = lamhr_c[::-1]
          Ahr_c = Ahr_c[::-1]
          semimajor_c = 0.048
          radius_c = 1.
          distance_c = 1.3
          Teff_c  = 3040.   # Sun-like Teff (K)
          Rs_c    = 0.141      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by G. Arney (Meadows et al. 2016)']

      if comparison.value =='Proxima Cen b 10 bar Venus':
          fn = 'Proxima17_smart_spectra_Venus10bar_cloudy_500_100000cm-1_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_c = model[:,0]
          solhr_c = model[:,2]
          Flx_c = model[:,3]
          Ahr_c = Flx_c/solhr_c
          lamhr_c = lamhr_c[::-1]
          Ahr_c = Ahr_c[::-1]
          semimajor_c = 0.048
          radius_c = 1.
          distance_c = 1.3
          Teff_c  = 3040.   # Sun-like Teff (K)
          Rs_c    = 0.141      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by G. Arney (Meadows et al. 2016)']

      if comparison.value =='Proxima Cen b CO2/CO/O2 dry':
          fn = 'Proxima18_gao_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_c = model[:,0]
          solhr_c = model[:,2]
          Flx_c = model[:,3]
          Ahr_c = Flx_c/solhr_c
          lamhr_c = lamhr_c[::-1]
          Ahr_c = Ahr_c[::-1]
          semimajor_c = 0.048
          radius_c = 1.
          distance_c = 1.3
          Teff_c  = 3040.   # Sun-like Teff (K)
          Rs_c    = 0.141      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by E. Schwieterman (Meadows et al. 2016)']            

      if comparison.value =='Proxima Cen b Earth':
          # this one needs a weighted average
          fn = 'Proxima19_earth_prox.pt_stratocum_hitran2012_50_100000cm_toa.rad'
          fn1 = 'Proxima19_earth_prox.pt_filtered_hitran2012_50_100000cm_toa.rad'
          fn2 = 'Proxima19_earth_prox.pt_stratocum_hitran2012_50_100000cm_toa.rad'
          fn = os.path.join(relpath, fn)
          fn1 = os.path.join(relpath, fn1)
          fn2 = os.path.join(relpath, fn2)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_c = model[:,0]
          solhr_c = model[:,2]
          Flx_c = model[:,3]
          model1 = np.loadtxt(fn1, skiprows=1)
          lamhr_1c = model1[:,0]
          solhr_1c = model1[:,2]
          Flx_1c = model1[:,3]
          model2 = np.loadtxt(fn2, skiprows=1)
          lamhr_2c = model2[:,0]
          solhr_2c = model2[:,2]
          Flx_2c = model2[:,3]
          Ahr_c = Flx_c/solhr_c
          Ahr_1c = Flx_1c/solhr_1c
          Ahr_2c = Flx_2c/solhr_2c
          Ahr_c = (Ahr_c*0.25+Ahr_2c*0.25+Ahr_1c*0.5)
          lamhr_c = lamhr_c[::-1]
          Ahr_c = Ahr_c[::-1]
          semimajor_c = 0.048
          radius_c = 1.
          distance_c = 1.3
          Teff_c  = 3040.   # Sun-like Teff (K)
          Rs_c    = 0.141      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by E. Schwieterman (Meadows et al. 2016)']  

      if comparison.value =='Proxima Cen b Archean Earth':
          fn = 'Proxima21_HAZE_msun21_0.0Ga_1.00e-02ch4_rmix_5.0E-2__30.66fscale_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_c = model[:,0]
          solhr_c = model[:,2]
          Flx_c = model[:,3]
          Ahr_c = Flx_c/solhr_c
          lamhr_c = lamhr_c[::-1]
          Ahr_c = Ahr_c[::-1]
          semimajor_c = 0.048
          radius_c = 1.
          distance_c = 1.3
          Teff_c  = 3040.   # Sun-like Teff (K)
          Rs_c    = 0.141      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by G. Arney (Meadows et al. 2016)']           

      if comparison.value =='Proxima Cen b hazy Archean Earth':
          fn = 'Proxima21_HAZE_msun21_0.0Ga_3.00e-02ch4_rmix_5.0E-2__30.66fscale_toa.rad'
          fn = os.path.join(relpath, fn)
          model = np.loadtxt(fn, skiprows=1)
          lamhr_c = model[:,0]
          solhr_c = model[:,2]
          Flx_c = model[:,3]
          Ahr_c = Flx_c/solhr_c
          lamhr_c = lamhr_c[::-1]
          Ahr_c = Ahr_c[::-1]
          semimajor_c = 0.048
          radius_c = 1.
          distance_c = 1.3
          Teff_c  = 3040.   # Sun-like Teff (K)
          Rs_c    = 0.141      # star radius in solar radii
          solhr_c =  cg.noise_routines.Fstar(lamhr_c, Teff_c, Rs_c, semimajor_c, AU=True)
          planet_label_c = ['Synthetic spectrum generated by G. Arney (Meadows et al. 2016)']

#for now I'm just adding these in like the others to save time on reworkign the code. This will need to be tidied up in future. 


      if comparison.value == 'O5V star':
          stargalaxy = 'true'
          fn = 'pickles_uk_1.ascii'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=39)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #convert A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)

      if comparison.value == 'B5V star':
          stargalaxy = 'true'
          fn = 'pickles_uk_6.ascii'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=39)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #convert A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)

      if comparison.value == 'A5V star':
          stargalaxy = 'true'
          fn = 'pickles_uk_12.ascii'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=39)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #convert A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)

      if comparison.value == 'F5V star':
          stargalaxy = 'true'
          fn = 'pickles_uk_16.ascii'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=39)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #convert A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)
          
      if comparison.value == 'G2V star':
          stargalaxy = 'true'
          fn = 'pickles_uk_26.ascii'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=39)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #convert A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)

      if comparison.value == 'G5V star':
          stargalaxy = 'true'
          fn = 'pickles_uk_27.ascii'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=39)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #convert A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)

      if comparison.value == 'K2V star':
          stargalaxy = 'true'
          fn = 'pickles_uk_33.ascii'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=39)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #convert A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)

      if comparison.value == 'K5V star':
          stargalaxy = 'true'
          fn = 'pickles_uk_36.ascii'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=39)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #convert A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)

      if comparison.value == 'M0V star':
          stargalaxy = 'true'
          fn = 'pickles_uk_38.ascii'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=39)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #convert A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)

      if comparison.value == 'M2V star':
          stargalaxy = 'true'
          fn = 'pickles_uk_40.ascii'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=39)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #convert A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)
          
      if comparison.value == 'M4V star':
          stargalaxy = 'true'
          fn = 'pickles_uk_43.ascii'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=39)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #convert A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)
          
      if comparison.value == 'M5V star':
          stargalaxy = 'true'
          fn = 'pickles_uk_44.ascii'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=39)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #convert A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)
          
      if comparison.value == 'Proxima Centauri star':
          stargalaxy = 'true'
          fn = 'proxima_cen_sed.txt'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=25)
 #         import pdb; pdb.set_trace()
          lamhr_c = model[:,0]
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)

      if comparison.value == 'T0 brown dwarf':
          stargalaxy = 'true'
          fn = 'T0_SDSS0837m0000_full_fluxed.txt'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=13)
#          import pdb; pdb.set_trace()
          lamhr_c = model[:,0]
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)          

      if comparison.value == 'T9 brown dwarf':
          stargalaxy = 'true'
          fn = 'T9_WISE1741p2553_full_fluxed.txt'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=13)
#          import pdb; pdb.set_trace()
          lamhr_c = model[:,0]
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)               
         
      if comparison.value == 'L5 brown dwarf':
          stargalaxy = 'true'
          fn = 'L5_2MASS1821p1414_full_fluxed.txt'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=13)
#          import pdb; pdb.set_trace()
          lamhr_c = model[:,0]
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)    

      if comparison.value == 'L8 brown dwarf':
          stargalaxy = 'true'
          fn = 'L8_SDSS0857p5708_full_fluxed.txt'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=13)
#          import pdb; pdb.set_trace()
          lamhr_c = model[:,0]
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)    

      if comparison.value == 'NGC 337 spiral galaxy':
          stargalaxy = 'true'
          fn = 'NGC_0337_S_Uv-MIr_bms2014.txt'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=9)
#          import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)  
          
      if comparison.value == 'NGC 660 peculiar galaxy':
          stargalaxy = 'true'
          fn = 'NGC_0660_S_Uv-MIr_bms2014.txt'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=9)
#          import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)  

      if comparison.value == 'NGC 4621 elliptical galaxy':
          stargalaxy = 'true'
          fn = 'NGC_4621_S_Uv-MIr_bms2014.txt'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=9)
#          import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)           

      if comparison.value == 'NGC 5033 spiral galaxy':
          stargalaxy = 'true'
          fn = 'NGC_5033_S_Uv-MIr_bms2014.txt'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=9)
#          import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)

      if comparison.value == 'Haro 6 blue compact dwarf galaxy':
          stargalaxy = 'true'
          fn = 'Haro_06_S_Uv-MIr_bms2014.txt'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=9)
#          import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #A -> um
          Flx_c = model[:,1]
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)   

      if comparison.value == 'NGC 7476 spiral galaxy':
          stargalaxy = 'true'
          fn = 'NGC_7674_S_Uv-MIr_bms2014.txt'
          fn = os.path.join(relpath2, fn)
          model = np.loadtxt(fn, skiprows=9)
#          import pdb; pdb.set_trace()
          lamhr_c = model[:,0]*.0001 #A -> um
          Flx_c = model[:,1] 
          Flx_c = cg.downbin_spec(Flx_c, lamhr_c, lam, dlam)   
          
      global lammin_c
      global lammax_c
      lammin_c=min(lamhr_c)
      if lammin_c <= 0.2:
         lammin_c = 0.2
      lammax_c=3.
              
    print 'stargalaxy is ', stargalaxy
    print 'teststar is', teststar
#    import pdb; pdb.set_trace()
    if comparison.value != 'none' and teststar == False:
      print 'comparison.value =', comparison.value
      print  'running comparison spectrum'
      try:
         distance_c
      except NameError:
         print "running comparison"
         lamC, dlamC, AC, qC, CratioC, cpC, cspC, czC, cezC, cDC, cRC, cthC, ccicC, DtSNRC = \
         cg.count_rates(Ahr_c, lamhr_c, solhr_c, alpha,  radius_c, Teff_c, Rs_c, semimajor_c, distance.value, exozodi.value, diam=diameter.value, diam_ins=diam_ins, collect_area=collect_area, Res=resolution.value, Res_UV = resolution_UV.value, Res_NIR = resolution_NIR.value,Tsys=temperature.value,  IWA=inner.value, IWA_UV=inner_uv.value, IWA_NIR=inner_nir.value, OWA=outer.value,lammin_uv=lammin_uv, lammin_vis=lammin_vis, lammin_nir=lammin_nir, lammax=lammax,  De_UV=darkcurrent_uv.value, De_VIS=darkcurrent_vis.value, De_NIR=darkcurrent_nir.value, Re_UV=readnoise_uv.value, Re_VIS=readnoise_vis.value, Re_NIR=readnoise_nir.value, CIC_UV=cic_uv.value, CIC_VIS = cic_vis.value, CIC_NIR = cic_nir.value, Dtmax = dtmax.value, THERMAL=True, GROUND=ground_based_, wantsnr=want_snr.value, ntherm=ntherm.value, gain = gain.value,  Tput=throughput_vis.value,  Tput_uv = throughput_uv.value, Tput_nir = throughput_nir.value, o_Tput_uv = o_throughput_uv.value, o_Tput_vis = o_throughput_vis.value, o_Tput_nir = o_throughput_nir.value,  C=contrast_, LUVOIR_A=LUVOIR_A)
      else:
         print "running comparison spectrum"
         lamC, dlamC, AC, qC, CratioC, cpC, cspC, czC, cezC, cDC, cRC, cthC, ccicC, DtSNRC = \
          cg.count_rates(Ahr_c, lamhr_c, solhr_c, alpha, radius_c, Teff_c, Rs_c, semimajor_c, distance_c, exozodi.value, diam=diameter.value, diam_ins=diam_ins, collect_area=collect_area, Res=resolution.value, Res_UV = resolution_UV.value, Res_NIR = resolution_NIR.value,Tsys=temperature.value,  IWA=inner.value, IWA_UV=inner_uv.value, IWA_NIR=inner_nir.value, OWA=outer.value, lammin_uv=lammin_uv, lammin_vis=lammin_vis, lammin_nir=lammin_nir, lammax=lammax, De_UV=darkcurrent_uv.value, De_VIS=darkcurrent_vis.value, De_NIR=darkcurrent_nir.value, Re_UV=readnoise_uv.value, Re_VIS=readnoise_vis.value, Re_NIR=readnoise_nir.value, CIC_UV=cic_uv.value, CIC_VIS = cic_vis.value, CIC_NIR = cic_nir.value, Dtmax = dtmax.value, THERMAL=True, GROUND=ground_based_, wantsnr=want_snr.value, ntherm=ntherm.value, gain = gain.value, Tput=throughput_vis.value,  Tput_uv = throughput_uv.value, Tput_nir = throughput_nir.value, o_Tput_uv = o_throughput_uv.value, o_Tput_vis = o_throughput_vis.value, o_Tput_nir = o_throughput_nir.value, C=contrast_, LUVOIR_A=LUVOIR_A)

    if stargalaxy == 'true':
       #check for nans
       nans = np.isnan(Flx_c)
       Flx_c[nans] = np.interp(lam[nans], lam[~nans], Flx_c[~nans])

       #Flx_c = np.nan_to_num(Flx_c)
       maxbright1 = max(Cratio[np.isfinite(Cratio)])
       maxbright2 = max(Flx_c)
       ratio = maxbright1/maxbright2
       CratioC = [x * ratio for x in Flx_c]
       lamC = lam
       DtSNRC = [x * 0. for x in Flx_c]
       CratioC = np.nan_to_num(CratioC)
       DtSNRC = np.nan_to_num(DtSNRC)
       
    if comparison.value == 'none':
       lamC = lamhr_ * 0.
       CratioC = Ahr_ *0.
       DtSNRC = lamhr_ * 0.


    lastcomparison = comparison.value
    #UPDATE DATA
  #  pdb.set_trace()
    compare.data = dict(lam=lamC, cratio=CratioC*1e9)
    expcompare.data = dict(lam=lamC[np.isfinite(DtSNRC)], DtSNR=DtSNRC[np.isfinite(DtSNRC)])
        
    #######PLOT UPDATES#######    
    global snr_ymax_
    global snr_ymin_

    #ii = np.where(lam < 3.) #only want where reflected light, not thermal
    #iii = np.where(lamC < 3.)  #only want where reflected light, not thermal
   
    #Cratio_ok = Cratio[ii]
    #CratioC_ok = CratioC[iii]
    Cratio_ok = Cratio[~np.isnan(Cratio)]
    CratioC_ok = CratioC[~np.isnan(CratioC)]
    print 'snr_ymax_',  np.max([np.max(Cratio_ok)*1e9, np.max(CratioC_ok)*1e9])
    print 'snr_ymin_',  np.min([np.min(Cratio_ok)*1e9, np.min(CratioC_ok)*1e9])
    snr_ymax_ = np.max([np.max(Cratio_ok)*1e9, np.max(CratioC_ok)*1e9])
    snr_ymin_ = np.min([np.min(Cratio_ok)*1e9, np.min(CratioC_ok)*1e9])
    snr_plot.y_range.start = snr_ymin_*0.9

    exp_plot.yaxis.axis_label='Integration time for SNR = '+str(want_snr.value)+' [hours]' 

    
    if comparison.value != 'none':
       snr_plot.title.text = 'Planet Spectrum: '+template.value +' and comparison spectrum '+comparison.value
       exp_plot.title.text = 'Planet Spectrum: '+template.value +' and comparison spectrum '+comparison.value
       
    if comparison.value == 'none':
      snr_plot.title.text = 'Planet Spectrum: '+template.value
      exp_plot.title.text =  'Planet Spectrum: '+template.value

    if template.value == 'Early Mars' or template.value == 'Mars':
       if comparison.value == 'none' or comparison.value == 'Early Mars' or comparison.value == 'Mars':
          snr_plot.y_range.end = snr_ymax_ + 2.*snr_ymax_
    else:
       snr_plot.y_range.end = snr_ymax_ *1.1
      


       
######################################
# SET UP ALL THE WIDGETS AND CALLBACKS 
######################################

source = ColumnDataSource(data=dict(value=[]))
source.on_change('data', update_data)
exptime  = Slider(title="Integration time per bandpass (hours)", value=80., start=0.1, end=1000.0, step=0.1, callback_policy='mouseup')
exptime.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
distance = Slider(title="Distance (parsec)", value=7., start=1.28, end=50.0, step=0.2, callback_policy='mouseup', width=250) 
distance.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
radius   = Slider(title="Planet Radius (R_Earth)", value=1.0, start=0.5, end=20., step=0.1, callback_policy='mouseup', width=250) 
radius.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
semimajor= Slider(title="Semi-major axis of orbit (AU)", value=1.0, start=0.01, end=20., step=0.01, callback_policy='mouseup', width=250) 
semimajor.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
exozodi  = Slider(title="Number of Exozodi", value = 4, start=0.5, end=50., step=0.5, callback_policy='mouseup', width=250) 
exozodi.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
diameter  = Slider(title="Mirror Diameter (meters)", value = 15., start=0.5, end=50., step=0.1, callback_policy='mouseup') 
diameter.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
resolution  = Slider(title="Telescope Visible Resolution (R)", value = 140.0, start=4.0, end=300., step=1., callback_policy='mouseup') 
resolution.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
resolution_UV  = Slider(title="Telescope UV Resolution (R)", value = 7.0, start=4.0, end=300., step=1., callback_policy='mouseup') 
resolution_UV.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
resolution_NIR  = Slider(title="Telescope NIR Resolution (R)", value = 70.0, start=4.0, end=300., step=1., callback_policy='mouseup') 
resolution_NIR.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
temperature  = Slider(title="Telescope Temperature (K)", value = 270.0, start=90.0, end=400., step=10., callback_policy='mouseup') 
temperature.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
inner_uv  = Slider(title="UV Inner Working Angle factor x lambda/D", value = 3.5, start=1.2, end=10., step=0.1, callback_policy='mouseup') 
inner_uv.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
inner  = Slider(title="Visible Inner Working Angle factor x lambda/D", value = 3.5, start=1.2, end=10., step=0.1, callback_policy='mouseup') 
inner.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
inner_nir  = Slider(title="NIR Inner Working Angle factor x lambda/D", value = 2.0, start=1.2, end=10., step=0.1, callback_policy='mouseup') 
inner_nir.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
outer  = Slider(title="Outer Working Angle factor x lambda/D", value = 64.0, start=10, end=100., step=1, callback_policy='mouseup') 
outer.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
darkcurrent_uv  = Slider(title="UV Dark Current (counts/s)", value = 3e-5, start=1e-6, end=1e-3, step=1e-6, callback_policy='mouseup') 
darkcurrent_uv.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
darkcurrent_vis  = Slider(title="VIS Dark Current (counts/s)", value = 3e-5, start=1e-6, end=1e-3, step=1e-6, callback_policy='mouseup') 
darkcurrent_vis.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
darkcurrent_nir  = Slider(title="NIR Dark Current (counts/s)", value = 2e-3, start=1e-5, end=1e-3, step=1e-5, callback_policy='mouseup') 
darkcurrent_nir.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
readnoise_uv  = Slider(title="UV Read noise (counts/pixel)", value = 1e-2, start=1e-4, end=10, step=0.01, callback_policy='mouseup') 
readnoise_uv.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
readnoise_vis  = Slider(title="VIS Read noise (counts/pixel)", value = 1e-2, start=1e-4, end=10, step=0.01, callback_policy='mouseup') 
readnoise_vis.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
readnoise_nir  = Slider(title="NIR Read noise (counts/pixel)", value = 2.5, start=0, end=10, step=0.01, callback_policy='mouseup') 
readnoise_nir.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
cic_uv  = Slider(title="UV clock induced charge (counts/pixel/photon count)", value = 1.3e-3, start=0, end=1e-2, step=0.0001, callback_policy='mouseup') 
cic_uv.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
cic_vis  = Slider(title="VIS clock induced noise (counts/pixel)", value = 1.3e-3, start=0, end=1e-2, step=0.0001, callback_policy='mouseup') 
cic_vis.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
cic_nir  = Slider(title="NIR clock induced noise (counts/pixel)", value = 0, start=0, end=1e-2, step=0.0001, callback_policy='mouseup') 
cic_nir.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
dtmax  = Slider(title="Maximum single exposure time (hours)", value = 0.3, start=0.0003, end=3, step=0.0001, callback_policy='mouseup') 
dtmax.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
want_snr  = Slider(title="Desired signal-to-noise ratio? (only used for exposure time plot)", value = 10, start=0.5, end=100., step=0.5, callback_policy='mouseup') 
want_snr.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
ntherm  = Slider(title="Number of thermal surfaces:", value = 1, start=1, end=30., step=1, callback_policy='mouseup') 
ntherm.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
gain  = Slider(title="Detector gain", value = 1, start=1, end=1000., step=5, callback_policy='mouseup') 
gain.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
throughput_uv  = Slider(title="UV Mask Throughput", value = 0.15, start=0.01, end=1., step=0.01, callback_policy='mouseup') 
throughput_uv.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
throughput_vis  = Slider(title="VIS Mask Throughput", value = 0.15, start=0.01, end=1., step=0.01, callback_policy='mouseup') 
throughput_vis.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
throughput_nir  = Slider(title="NIR Mask Throughput", value = 0.15, start=0.01, end=1., step=0.01, callback_policy='mouseup') 
throughput_nir.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
o_throughput_uv  = Slider(title="UV Optical Throughput", value = 0.12, start=0.01, end=1., step=0.01, callback_policy='mouseup') 
o_throughput_uv.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
o_throughput_vis  = Slider(title="VIS Optical Throughput", value = 0.32, start=0.01, end=1., step=0.01, callback_policy='mouseup') 
o_throughput_vis.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
o_throughput_nir  = Slider(title="NIR Optical Throughput", value = 0.60, start=0.01, end=1., step=0.01, callback_policy='mouseup') 
o_throughput_nir.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
contrast  = Slider(title="Log coronagraph design contrast", value = -10, start=-10.5, end=-9, step=0.1, callback_policy='mouseup') 
contrast.callback = CustomJS(args=dict(source=source), code="""
    source.data = { value: [cb_obj.value] }
""")
#ground based choice
ground_based = Select(title="Simulate ground-based observation?", value="No", options=["No",  "Yes"])

#bandpass choice
bandpass = Select(title="Show Notional LUVOIR-A bandpasses", value="No", options=["No",  "Yes"])

#mirror choice
mirror_type = Select(title="Type of mirrors?", value="Al", options=["Al",  "Perfect"])

#starshade choice
starshade = Select(title="Simulate starshade-like observation?", value="No", options=["No",  "Yes"])

#observatory choice
observatory = Select(title="Simulate specific observatory?", value="No", options=["No",  "LUVOIR Architecture A", "LUVOIR Architecture B"])

#select menu for planet
template = Select(title="Planet Spectrum", value="Earth", options=["Earth",  "Archean Earth", "Hazy Archean Earth", "1% PAL O2 Proterozoic Earth", "0.1% PAL O2 Proterozoic Earth","Venus", "Early Mars", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune",'-----','Warm Neptune at 2 AU', 'Warm Neptune w/o Clouds at 1 AU', 'Warm Neptune w/ Clouds at 1 AU','Warm Jupiter at 0.8 AU', 'Warm Jupiter at 2 AU',"False O2 Planet (orbiting F2V)", '-----', 'Proxima Cen b 10 bar 95% O2 dry', 'Proxima Cen b 10 bar 95% O2 wet', 'Proxima Cen b 10 bar O2-CO2', 'Proxima Cen b 90 bar O2-CO2', 'Proxima Cen b 90 bar Venus', 'Proxima Cen b 10 bar Venus', 'Proxima Cen b CO2/CO/O2 dry', 'Proxima Cen b Earth', 'Proxima Cen b Archean Earth', 'Proxima Cen b hazy Archean Earth' ])
#select menu for comparison spectrum
comparison = Select(title="Show comparison spectrum?", value ="none", options=["none", "Earth",  "Archean Earth", "Hazy Archean Earth", "1% PAL O2 Proterozoic Earth", "0.1% PAL O2 Proterozoic Earth","Venus", "Early Mars", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune",'-----','Warm Neptune at 2 AU', 'Warm Neptune w/o Clouds at 1 AU', 'Warm Neptune w/ Clouds at 1 AU','Warm Jupiter at 0.8 AU', 'Warm Jupiter at 2 AU', "False O2 Planet (orbiting F2V)", '-----', 'Proxima Cen b 10 bar 95% O2 dry', 'Proxima Cen b 10 bar 95% O2 wet', 'Proxima Cen b 10 bar O2-CO2', 'Proxima Cen b 90 bar O2-CO2', 'Proxima Cen b 90 bar Venus', 'Proxima Cen b 10 bar Venus', 'Proxima Cen b CO2/CO/O2 dry', 'Proxima Cen b Earth', 'Proxima Cen b Archean Earth', 'Proxima Cen b hazy Archean Earth', '-----','stars & galaxies:', '(arbitrary y units)', 'O5V star', 'B5V star', 'A5V star', 'F5V star', 'G2V star', 'G5V star', 'K2V star', 'M0V star', 'M2V star', 'M4V star', 'M5V star', 'Proxima Centauri star', 'T0 brown dwarf', 'T9 brown dwarf', 'L5 brown dwarf', 'L8 brown dwarf', 'NGC 337 spiral galaxy', 'NGC 660 peculiar galaxy', 'NGC 4621 elliptical galaxy', 'NGC 5033 spiral galaxy', 'Haro 6 blue compact dwarf galaxy', 'NGC 7476 spiral galaxy'])

#info text
info_text = Div(text="""

The "Planet" tab includes options to simulate several types of planetary spectra that can be selected from the "Planet Spectrum" dropdown menu. The telescope-planetary system separation distance can be set using the "Distance" slider. When a target is selected, the "Planet Radius" and "Semi-major axis of orbit" sliders will default to the correct positions for the selected planet. Note that while it is possible to adjust these parameters for each target, changing them can result in spectra representing non-physical targets. Also included under the "Planet" tab is a slider for scaling exozodiacal dust.
<br><br>
The "Observation" tab controls telescope integration time per coronagraphic bandpass, maximum single exposure time, and the ability to turn on a ground-based simulator that includes thermal radiation from the sky and Earth's atmospheric transmission. There is also a slider to set a desired signal-to-noise ratio. In the "Exposure Time" plot tab, the simulator will display the integration time required to obtain this signal-to-noise ratio for the current telescope and instrumentation setup. Note that this tab applies only to the Exposure Time plot, not to the Spectrum plot.
<br><br>
The "Telescope" tab controls whether to simulate specific observatory architecture,   mirror diameter,  telescope temperature, the number of thermal surfaces,  aperture throughput, and the contrast.
<br><Br>
The "Instrument" tab controls the instrument inner working angle (IWA), outer working angle (OWA), both in terms of lambda/D, the spectrograph resolution for UV-VIS-NIR channels, and the detector gain factor.
<br><Br>
The underlying model is derived from the python-based version of Tyler Robinson's coronagraphic spectrum and noise model (Robinson et al. 2016). Python by Jacob Lustig-Yaeger. Bokeh rendering by Jason Tumlinson and Giada Arney.
<br><br>
For full details, please see the readme file <a href="coron_readme.txt">here</a>.

""",
width=600, height=120)

planet_text = Div(text="""Select parameters for simulated planet.""", width=250, height=15)
obs_text = Div(text="""Choose telescope integration time per coronagraphic bandpass, the maximum length of time for a single exposure,  and whether to turn on a ground-based simulator. Desired signal-to-noise ratio is used for the exposure time plot.""", width=250, height=100)
tel_text = Div(text="""Choose whether to use a specified telescope architecture, mirror diameter, telescope temperature, number of thermal surfaces,  whether to show the notional  LUVOIR bandpasses, aperture throughput, and the contrast.""", width = 250, height = 90)
ins_text = Div(text="""Choose the scaling factor for the inner working angle (IWA), the outer working angle (OWA), spectrographic resolution for UV-VIS-NIR channels, and detector gain factor""", width=250, height=70)


#

oo = column(children=[obs_text,exptime,dtmax, ground_based, want_snr]) 
pp = column(children=[planet_text, template, comparison, distance, radius, semimajor, exozodi]) 
qq = column(children=[instruction0, text_input, instruction1, format_button_group, instruction2, link_box])
ii = column(children=[ins_text, inner_uv, inner, inner_nir, outer,  resolution_UV, resolution, resolution_NIR, readnoise_uv, readnoise_vis, readnoise_nir, darkcurrent_uv, darkcurrent_vis, darkcurrent_nir, cic_uv, cic_vis, cic_nir])
tt = column(children=[tel_text, observatory,diameter,temperature, ntherm,  throughput_uv, throughput_vis, throughput_nir, o_throughput_uv, o_throughput_vis, o_throughput_nir, contrast])
info = column(children=[info_text])

observation_tab = Panel(child=oo, title='Observation', width=400)
planet_tab = Panel(child=pp, title='Planet', width=400)
telescope_tab = Panel(child=tt, title='Telescope', width=400)
instrument_tab = Panel(child=ii, title='Instrument', width=400)
download_tab = Panel(child=qq, title='Download', width=400)
info_tab = Panel(child=info, title='Info', width=400)

for w in [text_input]: 
    w.on_change('value', change_filename)
format_button_group.on_click(i_clicked_a_button)

for ww in [template]: 
    ww.on_change('value', update_data)

for www in [comparison]: 
    www.on_change('value', update_data)

for gg in [ground_based]: 
    gg.on_change('value', update_data)

for bb in [bandpass]: 
    bb.on_change('value', update_data)

for bb in [observatory]:
    bb.on_change('value', update_data)

for mimi in [mirror_type]:
    mimi.on_change('value', update_data)


inputs = Tabs(tabs=[ planet_tab, observation_tab, telescope_tab, instrument_tab], width=450)

ptab1 = Panel(child=snr_plot, title='Spectrum', width=800)
ptab2 = Panel(child=exp_plot, title='Exposure Time', width=800)
ptab3 = Panel(child=counts_plot, title='Count Rates', width=800)
ptabs = Tabs(tabs=[ptab1, ptab2, ptab3, info_tab, download_tab], width=800)


curdoc().add_root(row(inputs, ptabs)) 
